#include <iostream>
using namespace std;

/**
 * 1. static 정적 변수는 func 함수가 처음 호출될 때 한 번만 초기화되며,
 *    그 값은 프로그램이 종료할 때까지 지속된다.
 * 2. static으로 정적 변수를 선언할 때는 반드시 초기화해야 한다.
 *    만일, 초기화하지 않으면 컴파일러가 0으로 초기화한다.
 * 
 * 정적 변수의 수명 주기가 지역 변수와 다른 이유
 * - 지역 변수와 정적 변수는 메모리의 위치가 다르다.
 * 1. 지역 변수
 * - 지역 변수는 메모리 구조에서 스택(stack) 영역에 저장된다.
 * - 스택 영역의 변수는 함수가 호출될 때 메모리에 할당되며 종료될 때 메모리에서 해제된다.
 * 2. 정적 변수
 * - static으로 선언된 정적 변수는 데이터(data) 영역에 저장된다.
 * - 데이터 영역은 프로그램이 시작할 때 할당되며 종료할 때 해제된다.
 * 
 * static 변수는 언제 사용할까?
 * - static은 처음에 한 번만 초기화되고 그 값은 함수나 클래스의 인스턴스를 여러 번 호출할 때도 지속된다.
 * 
 * 메모리 구조
 * - 코드 영역   : 프로그램 코드
 * - 데이터 영역 : 전역 변수, 정적 변수
 * - 힙 영역    : 동적 할당 변수        => 런타임에 크기가 결정된다.
 * - 스택 영역   : 지역 변수, 매개변수    => 컴파일 타임에 크기가 결정된다.
 */
int getNewID()
{
    // static의 경우 한번만 초기화한다.
    // 다시 호출하여도 초기화는 무시된다.
    static int ID = 0; 
    return ++ID;
}

int main()
{
    cout << "ID: " << getNewID() << endl;
    cout << "ID: " << getNewID() << endl;
    cout << "ID: " << getNewID() << endl;
    cout << "ID: " << getNewID() << endl;
    cout << "ID: " << getNewID() << endl;

    return 0;
}