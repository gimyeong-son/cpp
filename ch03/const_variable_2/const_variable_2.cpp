#include <iostream>
using namespace std;

/**
 * 포인터 변수의 상수화
 * - 일반 변수를 상수화하는 것은 컴파일 오류만 주의하면 되지만, 포인터 변수를 상수화할 때는
 *   const 키워드의 위치에 따라 상수화할 대상이 달라지므로 구분해서 사용해야 한다.
 * 
 * const 위치에 따른 상수화 효과
 * 포인터 변수와 const 위치     |      요약
 * - const int *ptr = &a    | *ptr 상수화 = 포인터 변수가 가리키는 값을 상수화
 * - int* const ptr = &a    | ptr 상수화 = 포인터 변수 자체를 상수화
 * 
 * const 변수는 언제 사용할까?
 * - 초기화 후에 값을 변경해서는 안 되는 변수를 선언하고 싶을 때 const를 사용한다.
 * - 변수값이 의도하지 않게 바뀌는 것을 방지할 수 있다.
 */
int main()
{
    // 아래 코드에서 중요한 점은 상수화된 *ptr이 상수이지 가리키는 a변수 자체가 상수화되지는 않는다.
    int a = 0;
    const int* ptr1 = &a; // *ptr을 상수화
    a = 1;  // 컴파일 통과
    // *ptr = 2; // 컴파일 오류 발생

    int b = 0;
    int c = 1;

    // 포인터 변수 자체를 const로 지정했으므로 컴파일 오류가 발생한다.
    // 포인터 변수는 주소를 저장하는 변수로 포인터 변수 자체가 상수화되어 다른 변수의 주소로 변경할 수 없다.
    int* const ptr2 = &b; // ptr을 상수화
    
    a = 1;      // 컴파일 통과
    //ptr2 = &b;   // 컴파일 오류 발생
    *ptr2 = 22; // 컴파일 통과
    return 0;
}
/*
다시 정리
int a = 10, b = 20;

// 1. const int* ptr → "값을 못 바꾼다" (주소는 바꿀 수 있음)
      int const* ptr	✅ const int* ptr와 동일
const int* ptr = &a;
ptr = &b;     // ✅ 주소 변경 가능
//*ptr = 30;  // ❌ 값 변경 불가

해석 순서:
1. ptr은 → *ptr 이다 → 포인터임
2. *ptr은 → const int → 상수 정수형을 가리키는 포인터
🔎 즉:
*ptr이 const int → "값은 바꿀 수 없다"
ptr은 const가 붙지 않았으므로 → "주소는 바꿀 수 있다"

========================================================================

// 2. int* const ptr2 → "주소를 못 바꾼다" (값은 바꿀 수 있음)
int* const ptr2 = &a;
//ptr2 = &b;   // ❌ 주소 변경 불가
*ptr2 = 30;   // ✅ 값 변경 가능

해석 순서:
1. ptr은 → const → 자기 자신이 상수
2. *ptr은 → int → 정수를 가리킨다
🔎 즉:
ptr은 상수 포인터 → "주소는 못 바꾼다"
*ptr은 정수형 → "값은 바꿀 수 있다"

========================================================================


// 3. const int* const ptr3 → "주소도 못 바꾸고 값도 못 바꾼다"
const int* const ptr3 = &a;
//ptr3 = &b;   // ❌ 주소 변경 불가
//*ptr3 = 30;  // ❌ 값 변경 불가

왼쪽 const → *ptr이 상수 → 값 못 바꿈
오른쪽 const → ptr이 상수 → 주소 못 바꿈
→ 둘 다 못 바꿈

========================================================================
*/